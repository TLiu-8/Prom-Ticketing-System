import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JFrame;

// 
// Decompiled by Procyon v0.5.36
// 

class FloorPlanSystem extends JFrame
{
    private final int MAX_X;
    private final int MAX_Y;
    private TestFrame.DrawingPanel panel;
    private boolean aKeyPressed;
    private boolean clicked;
    CircleY[] circleArray;
    private int scaledRadius;
    
    FloorPlanSystem(final ArrayList<Table> arrayT) {
        super("Frame");
        this.MAX_X = (int)this.getToolkit().getScreenSize().getWidth();
        this.MAX_Y = (int)this.getToolkit().getScreenSize().getHeight();
        this.aKeyPressed = false;
        this.clicked = true;
        this.circleArray = new CircleY[arrayT.size()];
        final int numOfTables = this.circleArray.length;
        final int sqrt = (int)Math.sqrt(numOfTables);
        final int numY = (this.MAX_Y - 150) / sqrt;
        final int spaceBetween = (int)((this.MAX_Y / sqrt - 100) * 0.5);
        this.scaledRadius = (int)(90.0 - 0.5 * (numOfTables - 30));
        for (int k = 0; k < sqrt; ++k) {
            for (int i = 0; i < sqrt; ++i) {
                final int inx = k * sqrt + i;
                final int newInx = i * sqrt + k;
                this.circleArray[inx] = new CircleY(i * numY + 20, k * numY + 20, this.scaledRadius, arrayT.get(newInx).getStudents(), newInx + 1);
            }
        }
        final int sub = (int)(numOfTables - Math.pow(sqrt, 2.0));
        final int rows = sub / sqrt + 1;
        final int perfSquare = (int)Math.pow(sqrt, 2.0);
        for (int j = 0; j < rows; ++j) {
            for (int l = 0; l < sqrt; ++l) {
                final int inx = perfSquare + j * sqrt + l;
                if (inx < this.circleArray.length) {
                    this.circleArray[inx] = new CircleY((sqrt + j) * numY + 20, l * numY + 20, this.scaledRadius, arrayT.get(inx).getStudents(), inx + 1);
                }
            }
        }
        this.add((Component)(this.panel = new TestFrame.DrawingPanel(this)));
        this.setDefaultCloseOperation(1);
        this.setSize(this.MAX_X, this.MAX_Y);
        this.addMouseListener((MouseListener)new TestFrame.MyMouseListener(this, (TestFrame.TestFrame$1)null));
        this.addKeyListener((KeyListener)new TestFrame.MyKeyListener(this, (TestFrame.TestFrame$1)null));
        this.setVisible(true);
    }
    
    void redraw() {
        this.panel.repaint();
    }
    
    import java.awt.Point;
import java.awt.MouseInfo;
import java.awt.Font;
import java.awt.Color;
import java.awt.image.ImageObserver;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.Image;
import javax.swing.JPanel;

// 
// Decompiled by Procyon v0.5.36
// 

class DrawingPanel extends JPanel
{
    Image tiles;
    Image club;
    Image tablePic;
    
    DrawingPanel() {
        this.tiles = Toolkit.getDefaultToolkit().getImage("Photos/floor.png");
        this.club = Toolkit.getDefaultToolkit().getImage("Photos/dancefloor.png");
        this.tablePic = Toolkit.getDefaultToolkit().getImage("Photos/tablePic.png");
    }
    
    public void paintComponent(final Graphics g) {
        super.paintComponent(g);
        g.drawImage(this.tiles, 0, 0, TestFrame.access$200(TestFrame.this), TestFrame.access$300(TestFrame.this), this);
        g.drawImage(this.club, TestFrame.access$200(TestFrame.this) - 450, 0, 400, TestFrame.access$300(TestFrame.this) - 100, this);
        g.setColor(new Color(255, 255, 255));
        g.setFont(new Font("Dancing Script Regular", 1, 24));
        g.drawString("DANCE FLOOR", TestFrame.access$200(TestFrame.this) - 450, TestFrame.access$300(TestFrame.this) - 80);
        for (int i = 0; i < TestFrame.this.circleArray.length; ++i) {
            TestFrame.this.redraw();
            final Point pos = MouseInfo.getPointerInfo().getLocation();
            if (pos.getX() < TestFrame.this.circleArray[i].x + TestFrame.this.circleArray[i].r && pos.getX() > TestFrame.this.circleArray[i].x && pos.getY() < TestFrame.this.circleArray[i].y + TestFrame.this.circleArray[i].r && pos.getY() > TestFrame.this.circleArray[i].y) {
                g.drawImage(this.tablePic, TestFrame.this.circleArray[i].x - 15, TestFrame.this.circleArray[i].y - 15, TestFrame.this.circleArray[i].r + 30, TestFrame.this.circleArray[i].r + 30, this);
            }
            else {
                g.drawImage(this.tablePic, TestFrame.this.circleArray[i].x, TestFrame.this.circleArray[i].y, TestFrame.this.circleArray[i].r, TestFrame.this.circleArray[i].r, this);
            }
            g.setColor(new Color(0, 0, 0));
            g.setFont(new Font("Dancing Script Regular", 0, TestFrame.this.circleArray[i].r / 6));
            g.drawString("Table " + TestFrame.this.circleArray[i].tableNum, TestFrame.this.circleArray[i].x + TestFrame.this.circleArray[i].r / 6, TestFrame.this.circleArray[i].y + TestFrame.this.circleArray[i].r / 2);
            if (TestFrame.this.circleArray[i].display) {
                g.setColor(new Color(255, 255, 255));
                final Addition a = new Addition(TestFrame.this.circleArray[i]);
                TestFrame.this.circleArray[i].display = false;
                a.redraw();
            }
        }
    }
    import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

// 
// Decompiled by Procyon v0.5.36
// 

private class MyKeyListener implements KeyListener
{
    @Override
    public void keyTyped(final KeyEvent keyEvent) {
    }
    
    @Override
    public void keyPressed(final KeyEvent keyEvent) {
    }
    
    @Override
    public void keyReleased(final KeyEvent keyEvent) {
    }
}
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

// 
// Decompiled by Procyon v0.5.36
// 

private class MyMouseListener implements MouseListener
{
    @Override
    public void mouseClicked(final MouseEvent mouseEvent) {
    }
    
    @Override
    public void mouseEntered(final MouseEvent mouseEvent) {
    }
    
    @Override
    public void mouseExited(final MouseEvent mouseEvent) {
    }
    
    @Override
    public void mousePressed(final MouseEvent mouseEvent) {
    }
    
    @Override
    public void mouseReleased(final MouseEvent mouseEvent) {
        final Point pos = TestFrame.access$400(TestFrame.this).getMousePosition();
        for (int i = 0; i < TestFrame.this.circleArray.length; ++i) {
            if (pos.getX() < TestFrame.this.circleArray[i].x + TestFrame.this.circleArray[i].r && pos.getX() > TestFrame.this.circleArray[i].x && pos.getY() < TestFrame.this.circleArray[i].y + TestFrame.this.circleArray[i].r && pos.getY() > TestFrame.this.circleArray[i].y) {
                TestFrame.this.circleArray[i].setDisplay();
            }
        }
    }
}
}
}